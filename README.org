* m
** Eshell
   #+BEGIN_SRC emacs-lisp
     (defun eshell/clear ()
       "Clear the eshell buffer. Type clear on eshell"
       ;; source: https://emacs.stackexchange.com/questions/12503/how-to-clear-the-eshell
       (let ((inhibit-read-only t))
         (erase-buffer)
         (eshell-send-input)))
   #+END_SRC

* JavaScript and React Native
  #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
      :init
      (add-to-list 'auto-mode-alist (cons (rx ".js" eos) 'js2-mode))
      (setq js2-basic-offset 2
            js-indent-level 2))
    (use-package typescript-mode
      :bind (:map typescript-mode-map ("M-." . lsp-ui-peek-find-definitions))
      )
  #+END_SRC

  Installing bash code for the language server. [[https://github.com/theia-ide/typescript-language-server][Link]].
  #+BEGIN_SRC shell-script
    ; npm i -g typescript-language-server; npm i -g typescript;
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package rjsx-mode
      :init
      (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
      :bind (:map rjsx-mode-map
                  ;; ("<" . nil)
                  ;; ("C-d" . nil)
                  ;; (">" . nil)
                  ("C-c C-n" . flycheck-next-error)
                  ("C-c C-p" . flycheck-previous-error)
                  ("M-." . lsp-ui-peek-find-definitions))
      :config
      (add-hook 'rjsx-mode-hook #'lsp))
  #+END_SRC
* Python
  Language server must be installed via the follwing bash command. If
  the language server will run on the virtual environment you will get
  better result.

  #+BEGIN_SRC shell-script-mode
  ; pip install python-language-server[all]; pip uninstall autopep8 yapf; pip install pyls-isort pyls-black;
  #+END_SRC

  I use eglot.
  #+BEGIN_SRC emacs-lisp
    (use-package pyvenv)

    (use-package python
      :bind (:map python-mode-map
                  ("C-c C-n" . flymake-goto-next-error)
                  ("C-c C-p" . flymake-goto-prev-error)
                  ("M-ı" . eglot-format-buffer) ;  M-ı used for indet all
                                            ;  the buffer. But in
                                            ;  python I use language
                                            ;  server for that.
                  ("M-." . xref-find-definitions)))
    ;;(add-hook 'before-save-hook (lambda() (interactive) (eglot-format-buffer)))
  #+END_SRC

  This part find the projects virtual environment via the .venv file
  on the project directory. This is virtualfish default setting. And
  then run eglot.

  #+BEGIN_SRC emacs-lisp
    (defun kadir/configure-python ()
      (progn
        (eglot-ensure)))

    (defun activate-venv-configure-python ()
      "source: https://github.com/jorgenschaefer/pyvenv/issues/51"
      (interactive)
      (require 'projectile)
      (progn
        (let* ((pdir (projectile-project-root)) (pfile (concat pdir ".venv")))
          (if (file-exists-p pfile)
              (pyvenv-workon (with-temp-buffer
                               (insert-file-contents pfile)
                               (nth 0 (split-string (buffer-string))))))))
      (kadir/configure-python))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (add-hook 'python-mode-hook 'activate-venv-configure-python)
  #+END_SRC

* Org Mode
  This part was written and copied in a bit of a rush. I will handle
  on my free time with use-package and write decent descriptions.

  =org-indent-mode= is very good mode but I use it whith =#+STARTUP:
  indent= when I want to.
  #+BEGIN_SRC emacs-lisp
    (use-package toc-org
      :defer 5
      :config
      (add-hook 'org-mode-hook 'toc-org-mode))

    (use-package org
      :bind
      (:map org-mode-map
            ("M-." . elisp-slime-nav-find-elisp-thing-at-point))
      :config
      (define-key org-mode-map (kbd "C-a") 'mwim-beginning-of-code-or-line)
      (setq org-src-tab-acts-natively t) ; intent code blocks with its major modes
      (setq org-src-window-setup 'current-window) ; edit code on same window
      (setq org-src-fontify-natively t)

      (setq org-agenda-files (apply 'append
                                    (mapcar
                                     (lambda (directory)
                                       (directory-files-recursively
                                        directory org-agenda-file-regexp))
                                     '("~/org"))))  ;; recursively get org files


      (setq org-catch-invisible-edits    'show-and-error
            org-cycle-separator-lines    0
            org-agenda-start-day         "-0d"
            org-agenda-span              20
            org-agenda-start-on-weekday  nil
            org-link-frame-setup         '((vm . vm-visit-folder-other-frame)
                                           (vm-imap . vm-visit-imap-folder-other-frame)
                                           (gnus . org-gnus-no-new-news)
                                           (file . find-file)
                                           (wl . wl-other-frame)))

      (defun kadir/org-indent-activate-but-config ()
        "org-indent-mode activated if the current buffer is not README.org"
        (unless (equal (buffer-file-name) config-org)
          (org-indent-mode 1)))
      (add-hook 'org-mode-hook #'kadir/org-indent-activate-but-config))

    (use-package htmlize)
    (use-package org-bullets)

    (add-hook 'org-mode-hook #'visual-line-mode)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("⁖" "⁖" "." "."))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package stripe-buffer
      :config
      (set-face-attribute 'stripe-highlight nil :background "#333335")

      :hook ((org-mode . turn-on-stripe-table-mode)
             (dired-mode-hook stripe-listify-buffer)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package org-web-tools
      :defer t)
  #+END_SRC
* Packages
** yaml-mode
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode)

     (use-package docker-compose-mode
       :mode "docker-compose.*\.yml\\'")

     (use-package dockerfile-mode
       :mode "Dockerfile[a-zA-Z.-]*\\'")
   #+END_SRC
** Restclient
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :init
       (add-to-list 'auto-mode-alist '("\\(\\.http\\'\\)" . restclient-mode))
       :config
       (add-to-list 'company-backends 'company-restclient))

     (use-package company-restclient
       :after (company restclient))
   #+END_SRC
** Company Mode
   I use =helm-company= for fuzzy searching. I change so many bindings. It could be writen a use-package :bind syntax.
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :defer 0.8
       :bind ((:map company-active-map
                    ([return] . nil)
                    ("RET" . nil)
                    ("TAB" . company-complete-selection)
                    ("<tab>" . company-complete-selection)
                    ("C-n" . company-select-next)
                    ("C-p" . company-select-previous))
              (:map company-mode-map ("C-." . helm-company)))
       :config
       (global-company-mode 1)
       (setq company-idle-delay         0.05
             company-dabbrev-downcase   0.05
             company-minimum-prefix-length 1
             ;; company-echo-delay 0                ; remove annoying blinking
             company-tooltip-align-annotations 't)
       (use-package helm-company))

     (use-package company-quickhelp
       :after (company)
       :init
       (company-quickhelp-mode)
       (setq company-quickhelp-max-lines 20
             company-quickhelp-delay     nil)
       :bind (:map company-active-map ("M-h" . company-quickhelp-manual-begin)))
   #+END_SRC
** Web Mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :init
       (setq css-indent-offset 2
             web-mode-markup-indent-offset 2
             web-mode-css-indent-offset 2
             web-mode-code-indent-offset 2
             web-mode-attr-indent-offset 2
             web-mode-engines-alist '(("django"    . "\\.html\\'")))
       (add-hook 'mhtml-mode 'web-mode)
       (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode)))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("C-x g" . magit-status)
              (:map magit-status-mode-map
                    (("C-x 4 C-m" . magit-diff-visit-file-other-window))
                    ))
       :config
       (use-package magit-todos :init (magit-todos-mode 1)))
   #+END_SRC
** Projectile
   Projectile is powerfull tool. I use it just for find in projectile directly.
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :defer 1
       :config
       (projectile-mode 1)         ; son projeleri hatırlamada işe yaramazsa sil geç
       )

     (use-package helm-projectile
       :bind (("C-x f" . helm-projectile)))
   #+END_SRC
** Wakatime
   I like statistics.
   #+BEGIN_SRC emacs-lisp
     (if (and (executable-find "wakatime") (file-exists-p "~/.wakatime.cfg"))
         (use-package wakatime-mode
           :defer 5
           :config
           (add-hook 'prog-mode-hook 'wakatime-mode)
           (message "waka activated")))
   #+END_SRC
** Mini modes for colors
   Those modes creates make coloring git changes, paranthesiz, curor, `TODO` keyword.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package highlight-numbers
     ;;   :hook (prog-mode . highlight-numbers-mode))

     ;; TODO: highlight-operators kebap case'i bozuyor
     ;; (use-package highlight-operators
     ;;   :hook (prog-mode . highlight-operators-mode))

     (use-package highlight-symbol
       :defer t   ;; TODO: bind key
       )
     (use-package rainbow-delimiters
       :defer 1
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
     (use-package hl-todo
       :defer 1
       :config
       (global-hl-todo-mode))
     (use-package diff-hl
       :defer 1
       :config
       (global-diff-hl-mode 1)
       (diff-hl-flydiff-mode 1))
     (use-package color-identifiers-mode
       :defer 1
       :config
       (add-hook 'prog-mode-hook #'global-color-identifiers-mode))
     (use-package beacon
       :defer 1
       :config
       (beacon-mode 1)
       (setq beacon-color "#2FB90E"))
   #+END_SRC

   #+BEGIN_QUOTE
   ....An example is that if you paste (yank) a block of text, it will be highlighted until you press the next key. This is just a small tweak, but gives a nice bit of visual feedback.  -- http://pragmaticemacs.com/emacs/volatile-highlights/
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp
     (use-package volatile-highlights
       :defer 3
       :config
       (volatile-highlights-mode 1)
       (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
       (vhl/install-extension 'undo-tree))
   #+END_SRC

** lsp-mode
   - [ ] TODO: nested yerine =:after= ile kodlanacak
     https://github.com/jwiegley/use-package/issues/453
   - Just using for js. This block could be run when on js mode opening
   for the reduce startup time.
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :config
       (setq  lsp-enable-snippet nil
              lsp-prefer-flymake nil)
       (add-hook 'lsp-mode-hook 'lsp-ui-mode)
       (use-package flycheck
         )
       (flymake-mode 0)
       (flycheck-mode 1)
       (use-package lsp-ui
         :requires lsp-mode flycheck
         :init
         (setq lsp-ui-doc-enable t
               lsp-ui-doc-use-childframe t
               lsp-ui-doc-position 'top
               lsp-ui-doc-include-signature t
               lsp-ui-sideline-enable nil
               lsp-ui-flycheck-enable t
               lsp-ui-flycheck-list-position 'right
               lsp-ui-flycheck-live-reporting nil  ; daha az sıklıkla flycheck
               lsp-ui-peek-enable t
               lsp-ui-peek-list-width 60
               lsp-ui-peek-peek-height 25))
       (use-package company-lsp
         :requires company
         :config
         (push 'company-lsp company-backends)))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :init
       (setq dashboard-banner-logo-title   nil
             dashboard-center-content      t
             ;; dashboard-set-heading-icons t
             dashboard-set-file-icons t
             dashboard-startup-banner      'logo
             dashboard-set-navigator    t
             dashboard-set-init-info       t
             dashboard-set-footer          nil
             )
       ;; Format: "(icon title help action face prefix suffix)"
       (setq dashboard-navigator-buttons
             `(;; line1
               (
                (,nil
                 "Agenda"
                 "Agenda"
                 (lambda (&rest _) (org-agenda)))
                )
               (("EMACS HELP" "" "?/h" (lambda (&rest _) (info "emacs")) nil "<" ">"))
               ))
       (setq dashboard-items '((recents  . 5)
                               (bookmarks . 10)
                               (registers . 5)))
       (dashboard-setup-startup-hook)
       )
   #+END_SRC

** so-long mode
   =so-long= is a new very primitive emacs internal package that
   handle long files. When the long files opens, so-long major mode
   automatically activate and default major-mode deactivated. So the
   problem on freezing when opening the big file is avoided.
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa)

     (unless (package-installed-p 'so-long)
       (quelpa
        '(so-long :fetcher url
                  :url "https://raw.githubusercontent.com/emacs-mirror/emacs/master/lisp/so-long.el"
                  :upgrade nil))
       (package-install 'use-package))
     (run-with-idle-timer
      2 nil
      (lambda()
        (progn
          (global-so-long-mode 1)
          (add-hook 'so-long-hook (lambda() (toggle-truncate-lines))))))
   #+END_SRC
** shell-pop
   #+BEGIN_SRC emacs-lisp
     (use-package shell-pop
       :defer 0.5
       :init
       (setq shell-pop-shell-type '("aweshell" "aweshell*" (lambda () (eshell)))
             shell-pop-window-size 40))
   #+END_SRC
* Theme and Apperiance
  Highlighting and region select should be has different colors.
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'highlight nil
                        :underline t :weight 'bold :background nil :foreground nil)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (if window-system
        (progn (use-package spacemacs-theme
                 :init
                 (setq spacemacs-theme-comment-italic t
                       spacemacs-theme-org-height nil)
                 (disable-theme 'wombat)
                 (global-hl-line-mode 1)        ; highlight your cusor line. don't lost.
                 (load-theme 'spacemacs-dark t)))
      (progn
        (global-hl-line-mode -1)))
  #+END_SRC

  Beautifying org mode. ([[https://jft.rocks/emacs/use-unicode-symbol-to-display-org-mode-checkboxes][source]])
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook (lambda ()
                               "Beautify Org Checkbox Symbol"
                               (push '("[ ]" .  "☐") prettify-symbols-alist)
                               (push '("[X]" . "☑" ) prettify-symbols-alist)
                               (push '("[-]" . "❍" ) prettify-symbols-alist)
                               (prettify-symbols-mode)))

    (defface org-checkbox-done-text
      '((t (:foreground "#71696A" :strike-through t)))
      "Face for the text part of a checked org-mode checkbox.")

    (font-lock-add-keywords
     'org-mode
     `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
        1 'org-checkbox-done-text prepend))
     'append)

  #+END_SRC
* Experimental
** other experimentals
   Make dired with icons. I don't understant that i like or not but it
   could be stant in experimental for just now.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package all-the-icons-dired
     ;;   :hook (dired-mode . all-the-icons-dired-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package bm
       :bind (("C-x C-m" . bm-toggle)
              ("C-x C-n" . bm-next)
              ("C-x C-p" . bm-previous)))

     (use-package helm-bm
       :bind (("C-x C-a" . helm-bm)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :init
       (setq dumb-jump-prefer-searcher 'rg
             dumb-jump-force-searcher  'rg
             dumb-jump-selector 'helm))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; (use-package better-jumper
     ;;   :defer 1
     ;;   :bind (("C-x C-n" . better-jumper-jump-forward)
     ;;          ("C-x C-p" . better-jumper-jump-backward))
     ;;   :config
     ;;   (better-jumper-mode +1)
     ;;   (global-set-key (kbd "C-x C-m") (lambda () (interactive)
     ;;                                     (progn
     ;;                                       (better-jumper-set-jump (point))
     ;;                                       (message "better jumper add link")))))
   #+END_SRC

   # ;; (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
   # ;; (use-package org-plus-contrib)
   # ;; (add-to-list 'org-export-backends 'taskjuggler)
   # ;; (org-babel-do-load-languages
   # ;;  'org-babel-load-languages
   # ;;  '((python . t)))
   # ;; (setq org-confirm-babel-evaluate nil)
* todo list
  Bu liste incelemeyi düşündüğüm ve düzeltmeyi planladığım şeyleri barındır.
  - C-x 4 M-. bind
  - https://github.com/rolandwalker/back-button ****güzelllll****
  - early-init dosyasının silinip oto tangle ile otomatik ayarlanması.
  - symbol-overlay dene (auto highltt yerine)
  - undo tree region undo??
  - rjsx mode auto format buffer.
  - lsp-highlight-read .. facei background ayarlıyor, düzeltilecek.
  - python activate auto format minor mode
  - org mode capture gibi bişiler.
  - magit todo da exclude etme olayı. bazı dosyalar büyük olunca çok
    fena patlıyor
  - https://github.com/lewang/ws-butler
  - https://github.com/smihica/emmet-mode
  - (x-ray) package https://www.emacswiki.org/emacs/XrayPackage#toc4
  - https://oremacs.com/2017/12/27/company-numbers/
  - http://wikemacs.org/wiki/Whitespace-mode   - empty lineların bulunup silinmesi
  - org async https://github.com/astahlman/ob-async
  - pdf-tools
  - org
    - https://github.com/mtekman/org-tanglesync.el#from-external-file-push-to-tangled-block
    - https://github.com/astahlman/ob-async
  - key-corde mode
  - defult settingsler yeniden yerşeltilmeli. çok karıştılar.
  - https://github.com/lassik/emacs-format-all-the-code  (format all languages)
  - https://github.com/manateelazycat/company-english-helper
