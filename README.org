This repo is mine emacs configuration. I am aware of the lacking
comments. Those are initial commits and I wish the comments will
complete in time.

* Startup optimization
  Some garbage collection settings. It is a deep topic and I am not
  the expert. Briefly, this will reduce your startup time (if on the
  top of your config) and some rare little lag problems when the
  garbage collection is active.

  Addition of this starup setup, I use =gcmh=. You could it on related
  title.
  #+BEGIN_SRC emacs-lisp
    ;; https://emacs.stackexchange.com/questions/34342/is-there-any-downside-to-setting-gc-cons-threshold-very-high-and-collecting-ga
    (setq gc-cons-percentage 0.6)
    (setq gc-cons-threshold-original (* 1024 1024 200))
    (setq gc-cons-threshold most-positive-fixnum)
    (setq file-name-handler-alist-original file-name-handler-alist)
    (setq file-name-handler-alist nil)
    (run-with-idle-timer
     5 nil
     (lambda ()
       (setq gc-cons-threshold gc-cons-threshold-original)
       (setq file-name-handler-alist file-name-handler-alist-original)
       (makunbound 'gc-cons-threshold-original)
       (makunbound 'file-name-handler-alist-original)
       (message "gc-cons-threshold and file-name-handler-alist restored")))
  #+END_SRC
* Emacs Default Settings
  Emacs has so many internal minor modes and settings. Some are not
  very useful but activated and some are good but deactivated by
  default. So I change them to my personal choice.
** Activate and Deactivateing internal minor modes
   =menu-bar-mode=, =tool-bar-mode= and =scrool-bar-mode= are generaly
   modern and mouse based features. I don't like them
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC

   Blink my cursor is annoying.
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode -1)
   #+END_SRC

   Default emacs' response when you have selected text and writing is
   not intuitive. =delete-selection-mode= change it what most people
   get used to on other editors.
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode 1)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)            ; shows matching parentheses
     (winner-mode 1)                ; provide undo, redo your window layout
     (global-subword-mode 1)        ; make camel-case usable with word shorcuts
     (global-hl-line-mode 1)        ; highlight your cusor line. don't lost.
     (save-place-mode 1)            ; save cursor position for next file opening, and restore it
   #+END_SRC
** Set Internal settings varabiles
*** General
    #+BEGIN_SRC emacs-lisp
      ;; cleaning init.el (another file for custom-set-variables etc.)
      (setq-default custom-file (concat user-emacs-directory "custom.el"))
      (load custom-file)


      (setq-default ring-bell-function      'ignore ; shutdown rings
                    inhibit-startup-message  t      ; disable startup messages
                    initial-scratch-message  nil    ; disable startup messages
                    mark-ring-max            128    ; increatese mark-ring
                    column-number-mode       t      ; show column number on modeline
                    default-buffer-file-coding-system 'utf-8-unix
                    kill-ring-max            256)   ; increatese kill-ring history

      ;; short yes no question when emacs ask
      (defalias 'yes-or-no-p 'y-or-n-p)

      ;; emacs frame name from projectile.
      ;;FIXME: could be problem on the first run the settings.
      (setq frame-title-format'
            '((:eval (projectile-project-name))))

      ;; smooth scrooling
      ;; (setq scroll-step 1)
      ;; (setq scroll-conservatively 10000)
      ;; (setq auto-window-vscroll nil)
    #+END_SRC
*** Programing
    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil       ; space instead of tabs
                    tab-width 4                ; 4 space for tab
                    show-trailing-whitespace nil) ; showing empty whitespaces
      (setq-default whitespace-newline -1 whitespace-line -1 whitespace-trailing -1)
    #+END_SRC

*** Appereance
    #+BEGIN_SRC emacs-lisp
      (fringe-mode '(5 . 0))                  ; my laptop screen is not full hd :(
      (set-face-attribute 'default nil
                          :family "Source Code Pro" :height 80 :weight 'normal)
      (setq-default max-mini-window-height   1
                    resize-mini-windows      nil
                    message-truncate-lines   t)  ; set and try to force mini buffer should be mini
    #+END_SRC
*** Key bindings
    I use M-ı for indent all buffer except python mode. In python
    instead of useing indent-regiton I use language servers' format
    buffer.
    #+BEGIN_SRC emacs-lisp
      ;; C-h, C-? replace
      (keyboard-translate ?\C-h ?\C-?)
      (keyboard-translate ?\C-? ?\C-h)

      (global-set-key (kbd "M-o") 'other-window)
      (global-set-key (kbd "M-u") 'winner-undo)
      (global-set-key (kbd "C-c <left>") nil)    ; disable winner undo default
      (global-set-key (kbd "C-x k")
                      '(lambda () (interactive) (kill-buffer (current-buffer))))
      (global-set-key (kbd "M-ı")                ; indent all buffer
                      (lambda() (interactive)
                        (indent-region (point-min) (point-max))))
    #+END_SRC

*** Hooks
    Clean whitespaces before saving.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'before-save-hook 'whitespace-cleanup)
    #+END_SRC
** Backup Setting
   Backup files are annoying when they are on project folder. Keep
   them on another folder.
   #+BEGIN_SRC emacs-lisp
     ;; source: https://emacs.stackexchange.com/questions/33/put-all-backups-into-one-backup-folder
     (let ((backup-dir "~/emacs/backups")
           (auto-saves-dir "~/emacs/auto-saves/"))
       (dolist (dir (list backup-dir auto-saves-dir))
         (when (not (file-directory-p dir))
           (make-directory dir t)))
       (setq-default backup-directory-alist `(("." . ,backup-dir))
                     auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
                     auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
                     tramp-backup-directory-alist `((".*" . ,backup-dir))
                     tramp-auto-save-directory auto-saves-dir))

     (setq-default backup-by-copying t    ; Don't delink hardlinks
                   delete-old-versions t  ; Clean up the backups
                   version-control t      ; Use version numbers on backups,
                   kept-new-versions 5    ; keep some new versions
                   kept-old-versions 2)   ; and some old ones, too
   #+END_SRC
* Initial Packages
  Melpa setting and use-package settings for auto-download use-package for auto-download all other packages.
** Melpa
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                         (not (gnutls-available-p))))
            (proto (if no-ssl "http" "https")))
       (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
       (when (< emacs-major-version 24)
         (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
     (package-initialize)
     (add-to-list 'package-archives
                  '("melpa-stable" . "https://stable.melpa.org/packages/") t)
   #+END_SRC

** Use-Package
   #+BEGIN_SRC emacs-lisp
     ;; https://github.com/novoid/dot-emacs/blob/master/config.org
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (require 'use-package-ensure)
     (setq use-package-always-ensure t
           use-package-always-defer t)
   #+END_SRC

* JavaScript and React Native
  #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
      :ensure t
      :init
      (add-to-list 'auto-mode-alist (cons (rx ".js" eos) 'js2-mode))
      (setq js2-basic-offset 2
            js-indent-level 2))
    (use-package typescript-mode)
  #+END_SRC

  Installing bash code for the language server. [[https://github.com/theia-ide/typescript-language-server][Link]].
  #+BEGIN_SRC shell-script
    ; npm i -g typescript-language-server; npm i -g typescript;
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package rjsx-mode
      :init
      (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
      :bind (:map rjsx-mode-map
                  ("M-." . lsp-ui-peek-find-definitions)
                  ("<" . nil)
                  ("C-d" . nil)
                  (">" . nil))
      :config
      (add-hook 'rjsx-mode-hook #'lsp))
  #+END_SRC

* Python
  Language server must be installed via the follwing bash command. If the language server will run on the virtual environment you will get better result.

  #+BEGIN_SRC shell-script-mode
  ; pip install python-language-server[all]; pip uninstall autopep8 yapf; pip install pyls-isort pyls-black;
  #+END_SRC

  I use eglot.
  #+BEGIN_SRC emacs-lisp
    (use-package pyvenv)

    (use-package python
      :bind (:map python-mode-map
                  ("C-c C-n" . flymake-goto-next-error)
                  ("C-c C-p" . flymake-goto-prev-error)
                  ("M-ı" . eglot-format-buffer) ;  M-ı used for indet all
                                            ;  the buffer. But in
                                            ;  python I use language
                                            ;  server for that.
                  ("M-." . xref-find-definitions))
      :config
      ;;(add-hook 'before-save-hook (lambda() (interactive) (eglot-format-buffer)))
      )
  #+END_SRC

  This part find the projects virtual environment via the .venv file on the project directory. This is virtualfish default setting. And then run eglot.

  #+BEGIN_SRC emacs-lisp
    (defun kadir-configure-python ()
      (progn
        (eglot-ensure)))

    (defun activate-venv-configure-python ()
      "source: https://github.com/jorgenschaefer/pyvenv/issues/51"
      (interactive)
      (require 'projectile)
      (progn
        (let* ((pdir (projectile-project-root)) (pfile (concat pdir ".venv")))
          (if (file-exists-p pfile)
              (pyvenv-workon (with-temp-buffer
                               (insert-file-contents pfile)
                               (nth 0 (split-string (buffer-string))))))))
      (kadir-configure-python))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (add-hook 'python-mode-hook 'activate-venv-configure-python)
  #+END_SRC

* Org Mode
  This part was written and copied in a bit of a rush. I will handle on my free time with use-package and write decent descriptions.
  #+BEGIN_SRC emacs-lisp

    (with-eval-after-load 'org
      (use-package htmlize)
      (define-key org-mode-map (kbd "C-a") 'mwim-beginning-of-code-or-line)
      (add-hook 'org-mode-hook #'visual-line-mode)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-catch-invisible-edits    'show-and-error
            org-cycle-separator-lines    0
            org-agenda-start-day         "-0d"
            org-agenda-span              16
            org-agenda-start-on-weekday  nil
            org-link-frame-setup         '((vm . vm-visit-folder-other-frame)
                                           (vm-imap . vm-visit-imap-folder-other-frame)
                                           (gnus . org-gnus-no-new-news)
                                           (file . find-file)
                                           (wl . wl-other-frame))))
    (use-package org-bullets)
    (setq org-bullets-bullet-list '("*" "*" "*" "*"))
  #+END_SRC
* Elisp
  I can't use emacs-lisp in (use-pacage) but it saving the day.
  #+BEGIN_SRC emacs-lisp
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                (use-package elisp-slime-nav
                  :bind (("M-." . elisp-slime-nav-find-elisp-thing-at-point)
                         ("M-," . pop-tag-mark)))))

    (use-package aggressive-indent
      :diminish
      :hook (emacs-lisp-mode . aggressive-indent-mode))

  #+END_SRC
* Packages
** yaml-mode
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode)

     (use-package docker-compose-mode
       :mode "docker-compose.*\.yml\\'")

     (use-package dockerfile-mode
       :mode "Dockerfile[a-zA-Z.-]*\\'")
   #+END_SRC
** auto compile for speed up
   #+BEGIN_SRC emacs-lisp
     (use-package auto-compile
       :init (auto-compile-on-load-mode)
       (setq load-prefer-newer t))
     ;; (setq auto-compile-display-buffer nil)
     ;; (setq auto-compile-mode-line-counter t)
   #+END_SRC
** Restclient
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :init
       (add-to-list 'auto-mode-alist '("\\(\\.http\\'\\)" . restclient-mode))
       :config
       (add-to-list 'company-backends 'company-restclient))

     (use-package company-restclient
       :after (company restclient))

   #+END_SRC
** Helm
   - Addition of theese settings:
     - =savehist-mode= will activated end of the settings for the remembering helm-M-x history.
     - =shackle-mode= used for helm allways open bottom of the frame.
   #+BEGIN_SRC emacs-lisp
     (defun spacemacs//helm-hide-minibuffer-maybe ()
       "Hide minibuffer in Helm session if we use the header line as input field."
       (when (with-helm-buffer helm-echo-input-in-header-line)
         (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
           (overlay-put ov 'window (selected-window))
           (overlay-put ov 'face
                        (let ((bg-color (face-background 'default nil)))
                          `(:background ,bg-color :foreground ,bg-color)))
           (setq-local cursor-type nil))))
   #+END_SRC

   This part could be writen with decent use-pacage key binding syntax.
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :init
       (setq helm-buffers-fuzzy-matching           t
             helm-ff-search-library-in-sexp        t
             helm-echo-input-in-header-line        t
             helm-M-x-always-save-history          t
             helm-M-x-input-history                t
             helm-display-function                 'pop-to-buffer)
       (helm-mode 1)
       :config
       (require 'helm-config)
       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "C-x b") 'helm-buffers-list)
       (global-set-key (kbd "C-x C-f") #'helm-find-files)
       (global-set-key (kbd "M-y") 'helm-show-kill-ring)
       (add-hook 'helm-minibuffer-set-up-hook
                 'spacemacs//helm-hide-minibuffer-maybe))
   #+END_SRC

   helm-dash is offline documentation and search on helm thing. Before
   useing helm-dash you should download the docs from =helm-das-install-docset=
   #+BEGIN_SRC emacs-lisp
     (use-package helm-dash
       :commands helm-dash)
   #+END_SRC

   show mode and search on helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm-describe-modes)

     ;; (use-package helm-descbinds
     ;;   :init
     ;;   (fset 'describe-bindings 'helm-descbinds))
   #+END_SRC


** Shackle mode
   Description on the helm section.
   #+BEGIN_SRC emacs-lisp
     (use-package shackle
       :init
       (shackle-mode 1)
       :config
       (setq shackle-rules
             '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.4)
               ("*eglot-help.*" :regexp t :align t :size 0.2))))
   #+END_SRC
** Company Mode
   I use =helm-company= for fuzzy searching. I change so many bindings. It could be writen a use-package :bind syntax.
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :init
       (global-company-mode 1)
       (setq company-idle-delay         0.05
             company-dabbrev-downcase   0.05
             company-minimum-prefix-length 1
             ;; company-echo-delay 0                ; remove annoying blinking
             company-tooltip-align-annotations 't)
       :bind ((:map company-active-map
                    ([return] . nil)
                    ("RET" . nil)
                    ("TAB" . company-complete-selection)
                    ("<tab>" . company-complete-selection)
                    ("C-n" . company-select-next)
                    ("C-p" . company-select-previous))
              (:map company-mode-map ("C-." . helm-company)))
       :config
       (use-package helm-company))

     (use-package company-quickhelp
       :after (company)
       :init
       (company-quickhelp-mode)
       (setq company-quickhelp-max-lines 20
             company-quickhelp-delay     nil)
       :bind (:map company-active-map ("M-h" . company-quickhelp-manual-begin)))
   #+END_SRC
** Web Mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :init
       (setq css-indent-offset 2
             web-mode-markup-indent-offset 2
             web-mode-css-indent-offset 2
             web-mode-code-indent-offset 2
             web-mode-attr-indent-offset 2
             web-mode-engines-alist '(("django"    . "\\.html\\'")))
       (add-hook 'mhtml-mode 'web-mode)
       (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode)))
   #+END_SRC
** Searching on the project
   #+BEGIN_SRC emacs-lisp
     (use-package helm-rg
       :init
       (setq helm-rg-default-directory 'git-root
             helm-rg--extra-args '("--max-columns" "200"))
       :bind ("<C-tab>" . #'helm-rg))
     (use-package deadgrep
       :bind ("<C-iso-lefttab>" . #'deadgrep))
   #+END_SRC
** undo-tree mode
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       ;; TODO: unto tree tüm geçmişi kaydediyor. araştırmak lazım
       :init
       (global-undo-tree-mode)
       :bind (("M-_" . undo-tree-redo)
              ("C-_" . undo-tree-undo)))
   #+END_SRC

** mwim and better default moveing
   Better C-a, C-e, C-w defaults.
   #+BEGIN_SRC emacs-lisp
     (defun spacemacs/backward-kill-word-or-region (&optional arg)
       "Calls `kill-region' when a region is active and
     `backward-kill-word' otherwise. ARG is passed to
     `backward-kill-word' if no region is active."
       (interactive "p")
       (if (region-active-p)
           ;; call interactively so kill-region handles rectangular selection
           ;; correctly (see https://github.com/syl20bnr/spacemacs/issues/3278)
           (call-interactively #'kill-region)
         (backward-kill-word arg)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package mwim
       :bind (("C-a" . mwim-beginning-of-code-or-line)
              ("C-e" . mwim-end-of-line-or-code)
              ("C-w" . spacemacs/backward-kill-word-or-region)))
   #+END_SRC
** expand-region mode
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :init
       (setq expand-region-fast-keys-enabled   nil
             expand-region-subword-enabled     t)
       :bind (("C-t" . er/expand-region)))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("C-x 4 C-m" . magit-diff-visit-file-other-window))
       :config
       (global-set-key (kbd "C-x g") 'magit-status)
       (use-package magit-todos :init (magit-todos-mode 1)))
   #+END_SRC
** Projectile
   Projectile is powerfull tool. I use it just for find in projectile and in some functions.
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :init
       (projectile-mode 1)         ; son projeleri hatırlamada işe yaramazsa sil geç
       )

     (use-package helm-projectile
       :bind (("C-x f" . helm-projectile)))
   #+END_SRC
** Wakatime
   I like statistics.
   #+BEGIN_SRC emacs-lisp
     (use-package wakatime-mode
       :init
       (add-hook 'prog-mode-hook 'wakatime-mode))
   #+END_SRC
** Mini modes for colors
   Those modes creates make coloring git changes, paranthesiz, curor, `TODO` keyword.
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :init
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
     (use-package hl-todo
       :init
       (global-hl-todo-mode))
     (use-package diff-hl
       :init
       (global-diff-hl-mode 1)
       (diff-hl-flydiff-mode 1))
     (use-package color-identifiers-mode
       :init
       (add-hook 'prog-mode-hook #'global-color-identifiers-mode))
     (use-package beacon
       :init
       (beacon-mode 1)
       (setq beacon-color "#2FB90E"))
   #+END_SRC
** doom-modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :commands (doom-mode-line-mode)
       :init
       (doom-modeline-mode 1)
       (setq doom-modeline-bar-width       1
             doom-modeline-height            1
             doom-modeline-buffer-encoding   nil
             ;; doom-modeline-buffer-modification-icon t
             doom-modeline-vcs-max-length    20
             doom-modeline-icon              t
             doom-modeline-buffer-file-name-style 'relative-to-project)
       (set-face-attribute 'mode-line nil :height 80)
       (set-face-attribute 'mode-line-inactive nil :height 80))
   #+END_SRC
** eglot
   Just using for python. This block could be run when on python mode opening for the reduce startup time.
   #+BEGIN_SRC emacs-lisp
     (use-package eglot
       :bind
       (("C-c DEL" . 'eglot-help-at-point))
       :config
       (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd")))
   #+END_SRC
** lsp-mode
   - [ ] TODO: nested yerine =:after= ile kodlanacak
     https://github.com/jwiegley/use-package/issues/453
   - Just using for js. This block could be run when on js mode opening
   for the reduce startup time.
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :config
       (setq  lsp-enable-snippet nil
              lsp-prefer-flymake nil)
       (add-hook 'lsp-mode-hook 'lsp-ui-mode)
       (use-package flycheck
         )
       (flymake-mode 0)
       (flycheck-mode 1)
       (use-package lsp-ui
         :requires lsp-mode flycheck
         :init
         (setq lsp-ui-doc-enable t
               lsp-ui-doc-use-childframe t
               lsp-ui-doc-position 'top
               lsp-ui-doc-include-signature t
               lsp-ui-sideline-enable nil
               lsp-ui-flycheck-enable t
               lsp-ui-flycheck-list-position 'right
               lsp-ui-flycheck-live-reporting nil  ; daha az sıklıkla flycheck
               lsp-ui-peek-enable t
               lsp-ui-peek-list-width 60
               lsp-ui-peek-peek-height 25))
       (use-package company-lsp
         :requires company
         :config
         (push 'company-lsp company-backends)))
   #+END_SRC
** multiple cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :bind (("C-M-n" . mc/mark-next-word-like-this)
              ("C-M-p" . 'mc/mark-previous-like-this)
              ("C-M-S-n" . mc/skip-to-next-like-this)
              ("C-M-S-p" . mc/skip-to-previous-like-this)
              ("C-S-N" . mc/unmark-previous-like-this)
              ("C-S-P" . mc/unmark-next-like-this)
              ("C-M-<mouse-1>" . mc/add-cursor-on-click)))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :init
       (setq dashboard-banner-logo-title   "Kemacs?"
             dashboard-center-content      t
             ;; dashboard-set-heading-icons t
             dashboard-set-file-icons t
             dashboard-startup-banner      'logo
             dashboard-set-navigator    t
             dashboard-set-init-info       t
             dashboard-set-footer          nil
             )
       ;; Format: "(icon title help action face prefix suffix)"
       (setq dashboard-navigator-buttons
             `(;; line1
               ((,nil
                 "Agenda"
                 "Browse homepage"
                 (lambda (&rest _) (org-agenda-list "homepage")))
                ("?" "" "?/h" #'help nil "<" ">"))))
       (dashboard-setup-startup-hook)
       :config
       (setq dashboard-items '((projects . 10)
                               (recents  . 5)
                               (bookmarks . 10)
                               (registers . 5))))
   #+END_SRC

** gcmh
   #+BEGIN_SRC emacs-lisp
     (use-package gcmh
       :init
       (gcmh-mode 1))
   #+END_SRC
** so-long mode
   =so-long= is a new very primitive emacs internal package that
   handle long files. When the long files opens, so-long major mode
   automatically activate and default major-mode deactivated. So the
   problem on freezing when opening the big file is avoided.
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa)

     (unless (package-installed-p 'so-long)
       (quelpa
        '(so-long :fetcher url
                  :url "https://raw.githubusercontent.com/emacs-mirror/emacs/master/lisp/so-long.el"
                  :upgrade nil))
       (package-install 'use-package))
     (global-so-long-mode 1)
   #+END_SRC

* Theme and Apperiance
  #+BEGIN_SRC emacs-lisp
    (if window-system
        (progn (use-package spacemacs-theme
                 :defer t
                 :init
                 (load-theme 'spacemacs-dark t)))
      (progn
        (global-hl-line-mode -1)
        (load-theme 'wombat t)))
  #+END_SRC
* Experimental
  #+BEGIN_SRC emacs-lisp
    ;; (use-package bm
    ;;   :bind (("C-x C-m" . bm-toggle)
    ;;          ("C-x C-n" . bm-next)
    ;;          ("C-x C-p" . bm-previous)))

    (use-package helm-bm
      :bind (("C-x C-a" . helm-bm)))
  #+END_SRC
  This part for trying the new features, modes, settings etc..
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;; (use-package which-key)
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :init
      (setq dumb-jump-prefer-searcher 'rg
            dumb-jump-force-searcher  'rg
            dumb-jump-selector 'helm
            )
      :bind
      (("M-." . dumb-jump-go)))
  #+END_SRC

  #+BEGIN_QUOTE
  ....An example is that if you paste (yank) a block of text, it will be highlighted until you press the next key. This is just a small tweak, but gives a nice bit of visual feedback.  -- http://pragmaticemacs.com/emacs/volatile-highlights/
  #+END_QUOTE

  #+BEGIN_SRC emacs-lisp
    (use-package volatile-highlights
      :config
      (volatile-highlights-mode 1)
      (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
      (vhl/install-extension 'undo-tree))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package better-jumper
      :init
      (better-jumper-mode +1)
      :bind (("C-x C-n" . better-jumper-jump-forward)
             ("C-x C-p" . better-jumper-jump-backward))
      :config
      (global-set-key (kbd "C-x C-m") (lambda () (interactive)
                                        (progn
                                          (better-jumper-set-jump (point))
                                          (message "better jumper add link")))))
  #+END_SRC

* todo list
  Bu liste incelemeyi düşündüğüm ve düzeltmeyi planladığım şeyleri barındır.

  - ace-window da bufferların yerini değiştirme vardı. ya ace kur yada
    alternatifini bul
  - https://github.com/mhayashi1120/auto-highlight-symbol-mode
    - otomatik alt çizmece
  - https://github.com/bmag/emacs-purpose
    - windowlara amaç ekleme ve ordaki bufferların o windowdan olmasını sağlama
  - empty lineların bulunup silinmesi
  - https://github.com/lewang/ws-butler
  - http://wikemacs.org/wiki/Whitespace-mode
  - https://github.com/smihica/emmet-mode
  - (use-package highlight-symbol)
  - (x-ray) package https://www.emacswiki.org/emacs/XrayPackage#toc4

* End
  I don't know why but if save hist will on the top. It creates a bug.
  #+BEGIN_SRC emacs-lisp
    (setq savehist-additional-variables      '(extended-command-history))
    (savehist-mode 1)
  #+END_SRC
