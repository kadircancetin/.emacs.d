* Finding all mono fonts

#+begin_src emacs-lisp
  (prin1 (mapconcat'identity
        (sort (seq-filter (apply-partially #'s-matches?
                                           ".*mono.*"
                                           ) (font-family-list))
              #'string-lessp) "  \n  "))
#+end_src
* smart?? garp collect

#+begin_src emacs-lisp
(defun k/garp_collect()
  (interactive)
  (while 1
    (progn
      (message "try gc")
      (sleep-for 0.1)
      (setq gc-cons-threshold-original 200)
      (garbage-collect)
      (setq gc-cons-threshold-original (* 1024 1024 20)))))

#+end_src
* eshell
#+begin_src emacs-lisp
  (defun eshell/clear ()
  "Clear the eshell buffer. Type clear on eshell"
  ;; source: https://emacs.stackexchange.com/questions/12503/how-to-clear-the-eshell
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
#+end_src

* hide show
#+begin_src emacs-lisp

(defun kadir/hide-fold-defs ()
  "Folds the all functions in python"
  (interactive)
  (save-excursion
    (require 'hideshow)
    (goto-char (point-min))
    (hs-hide-level 2)))
#+end_src
* pdf tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
  :load-path "/usr/share/emacs/site-lisp/pdf-tools/pdf-tools.el"
  :demand t
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :commands pdf-tools-install
  :config
  (pdf-tools-install) ;; initialise
  (setq-default pdf-view-display-size 'fit-page)   ;; open pdfs scaled to fit page
  ;; automatically annotate highlights
  (setq-default pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

#+END_SRC
* buffer flip
#+BEGIN_SRC emacs-lisp
  ;; (use-package buffer-flip
;;   :ensure t
;;   :bind  (("M-<SPC>" . buffer-flip)
;;           :map buffer-flip-map
;;           ( "M-<SPC>" .   buffer-flip-forward)
;;           ( "M-S-<SPC>" . buffer-flip-backward)
;;           ( "C-g" .     buffer-flip-abort)
;;           ( "M-g" .     buffer-flip-abort)
;;           )
;;   :config
;;   (setq buffer-flip-skip-patterns
;;         '("^\\*helm\\b"
;;           "^\\*swiper\\*$")))

#+END_SRC
* which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer 3
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (setq which-key-idle-delay 0.4))

#+END_SRC
* native
#+BEGIN_SRC emacs-lisp
  (if (and (fboundp 'native-comp-available-p)
         (native-comp-available-p))
    (message "Native compilation is available")
  (message "Native complation is *NOTT* available"))

(if (functionp 'json-serialize)
    (message "Native JSON is available")
  (message "Native JSON is *NOTT* available"))
#+END_SRC

* python
** some packages
#+BEGIN_SRC emacs-lisp
(use-package pony-mode)
#+END_SRC

** smartjump
#+BEGIN_SRC emacs-lisp
  (use-package smart-jump
  :defer 1
  ;; :init  (setq smart-jump-default-mode-list 'python-mode)
  :config
  (smart-jump-register :modes 'python-mode
                       :jump-fn 'xref-find-definitions
                       :pop-fn 'xref-pop-marker-stack
                       :refs-fn 'xref-find-references
                       :should-jump nil
                       :heuristic 'error
                       :async nil
                       :order 1)
  ;; (smart-jump-register :modes 'python-mode
  ;;                      :jump-fn 'kadir/jedi:goto-definition
  ;;                      :pop-fn 'jedi:goto-definition-pop-marker
  ;;                      :refs-fn 'xref-find-references
  ;;                      :should-jump t
  ;;                      :heuristic 'error
  ;;                      :async t
  ;;                      :order 2)
  ;; (smart-jump-register :modes 'python-mode
  ;;                      :jump-fn 'xref-find-definitions
  ;;                      :pop-fn 'xref-pop-marker-stack
  ;;                      :refs-fn 'xref-find-references
  ;;                      :should-jump t
  ;;                      :heuristic 'error
  ;;                      :async nil
  ;;                      :order 3)
  ;; (smart-jump-register :modes 'python-mode
  ;;                      :jump-fn 'dumb-jump-go
  ;;                      :pop-fn 'xref-pop-marker-stack
  ;;                      :should-jump t
  ;;                      :heuristic 'point
  ;;                      :async nil
  ;;                      :order 4)
  )

#+END_SRC

** jedi
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi)
(use-package jedi-core
  :init
  (setq jedi:goto-definition-marker-ring-length 50)
  (setq jedi:get-in-function-call-timeout 0)
  (setq company-async-timeout 9.001)
  :config


  (defun kadir/jedi:goto-definition()
    (interactive)
    (ring-insert jedi:goto-definition--marker-ring (point-marker))
    (jedi:goto-definition))

  (defun kadir/python-curson-on-import-p()
    (save-excursion (mwim-beginning-of-code-or-line) (looking-at ".*import.*")))

  (defun jedi:goto-definition--callback (reply other-window)
    (if (not reply)
        (message "Definition not found.")
      (setq jedi:goto-definition--cache reply)
      (jedi:goto-definition--nth other-window t)

      ;; kadir adds
      (when (kadir/python-curson-on-import-p)
        (jedi:goto-definition))))

  (defun jedi:goto-definition-push-marker ()
    "Push point onto goto-definition marker ring."
    (when (not (kadir/python-curson-on-import-p))
      (ring-insert jedi:goto-definition--marker-ring (point-marker))))


  )


(defun company-jedi-candidates (callback)
  "Return company candidates with CALLBACK."
  (deferred:nextc
    (jedi:call-deferred 'complete)
    (lambda (reply)
      (message "%s" reply)
      (let ((candidates (mapcar 'company-jedi-collect-candidates reply)))
        (funcall callback candidates)))))

#+END_SRC
